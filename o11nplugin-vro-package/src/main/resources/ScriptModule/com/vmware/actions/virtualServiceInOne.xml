<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="virtualServiceinOne"
	result-type="String" api-version="6.0.0"
	id="4be91a8d-f540-46ac-acb3-9ecc1ab6a904" version="0.1.2"
	allowed-operations="vfe">
	<param n="loadBalancerAlgo" t="string"><![CDATA[
	]]></param>
	<param n="enablePool" t="boolean"><![CDATA[
	]]></param>
	<param n="poolName" t="string"><![CDATA[
	]]></param>
	<param n="PoolServers"
		t="Array/CompositeType(IP:string,Ratio:string,Port:string):AVIServer"><![CDATA[
	]]></param>
	<param n="serverType" t="string"><![CDATA[
	]]></param>
	<param n="eastWestPlacement" t="boolean"><![CDATA[
	]]></param>
	<param n="vsVipName" t="string"><![CDATA[
	]]></param>
	<param n="aviAllocatedFIp" t="boolean"><![CDATA[
	]]></param>
	<param n="autoAllocateIp" t="boolean"><![CDATA[
	]]></param>
	<param n="enabled" t="boolean"><![CDATA[
	]]></param>
	<param n="autoAllocateFloatingIp" t="boolean"><![CDATA[
	]]></param>
	<param n="aviAllocatedVip" t="boolean"><![CDATA[
	]]></param>
	<param n="IPAddress" t="string"><![CDATA[
	]]></param>
	<param n="aviVroClient" t="AviVro:AviVroClient"><![CDATA[
	]]></param>
	<param n="SSLCertificate" t="string"><![CDATA[SSL Certificate]]></param>
	<param n="servicePort" t="string"><![CDATA[Virtual service port]]></param>
	<param n="Name" t="string"><![CDATA[Virtual service name]]></param>
	<param n="ApplicationProfile" t="string"><![CDATA[Application profile name ]]></param>
	<param n="poolOrPoolgroup" t="boolean"><![CDATA[Create pool or poolgroup]]></param>
	<param n="SSLCert" t="boolean"><![CDATA[Use SSL certificate or not]]></param>
	<param n="existingVIP" t="string"><![CDATA[
	]]></param>
	<param n="vsVIP" t="boolean"><![CDATA[
	]]></param>
	<script encoded="false"><![CDATA[try{
// Initialize pool property object
	var poolProperties = new Object();
	var algorithm = loadBalancerAlgo.toUpperCase();
	algorithm = "LB_ALGORITHM_"+algorithm.replace(" ", "_");
	// Set load balancer algorithm in properties
	poolProperties.lb_algorithm = algorithm;
// Initialize server list for get server details from user inputs.
	var servers = [];
	var Tenant=aviVroClient.cred.tenant;
	// Get the IP, Ratio, ServerType and Port from list of servers and push into JSON.
	for (index in PoolServers){
		var IP = PoolServers[index].IP;
		var ratio = PoolServers[index].Ratio;
		var port = PoolServers[index].Port;
		servers[index] = {"ip":{"addr":IP,"type":serverType}, "port":port, "ratio":ratio};
	}	
	// Set servers object in properties
	poolProperties.servers = servers;

	// Set pool status
	poolProperties.enabled = enablePool;
	poolProperties.name = poolName;
	poolProperties.tenant_ref = "/api/tenant?name="+Tenant;
	// Convert properties object into JSON string
	var poolData = JSON.stringify(poolProperties);	
	System.log("Pool Data:-> "+ poolData)
		aviVroClient.add("pool", poolData)



// Set Configuration for create VsVip

var name = existingVIP;
	if (vsVIP == false){
		name = vsVipName
	}
var vsVipProperties = {
			"tenant_ref": "/api/tenant?name="+Tenant,
			"east_west_placement" : eastWestPlacement,
			"name": name,
			"vip": [
				{
				"vip_id": "1",
				"avi_allocated_fip": aviAllocatedFIp,
				"auto_allocate_ip": autoAllocateIp,
				"enabled": enabled,
				"auto_allocate_floating_ip": autoAllocateFloatingIp,
				"avi_allocated_vip": aviAllocatedVip,
				"auto_allocate_ip_type": "V4_ONLY",
				"ip_address": {
						"type": serverType,
						"addr": IPAddress
						}
				}
				]
		}
	var vsVipData = JSON.stringify(vsVipProperties);
	System.log("vsVip Data:-> "+ vsVipData)
	aviVroClient.add("vsvip", vsVipData)



// Set the configuration for virtual service.

		var pool_ref = null
			if (poolOrPoolgroup != true){
					poolgroup_ref = null
					pool_ref = "/api/pool?name="+poolName
				}
				var Certificate = SSLCertificate;
				var AppProfile = "System-HTTP";
				var ssl = false;
				var ssl_profile_ref = null;
				var ssl_key_and_certificate_refs = null;
				if (ApplicationProfile == "HTTPS" || SSLCert == true ) {
					AppProfile= "System-Secure-HTTP";
					ssl = true
					ssl_profile_ref = "/api/sslprofile?name=System-Standard";
					ssl_key_and_certificate_refs = [ "/api/sslkeyandcertificate/?name="+Certificate ];		
				}else if (ApplicationProfile == "L4 SSL/TLS" || SSLCert == true ) {
					AppProfile= "System-SSL-Application";
					ssl = true
					ssl_profile_ref = "/api/sslprofile?name=System-Standard";
					ssl_key_and_certificate_refs = [ "/api/sslkeyandcertificate/?name="+Certificate ];		
				}else if (ApplicationProfile == "L4" ) {
					AppProfile= "System-L4-Application";
				}
				configuration = {
						"vsvip_ref": "/api/vsvip?name="+name,
						"tenant_ref":"/api/tenant?name="+Tenant,
						"ssl_profile_ref": ssl_profile_ref,
						"ssl_key_and_certificate_refs": ssl_key_and_certificate_refs,
						"application_profile_ref": "/api/applicationprofile?name="+AppProfile,
						"services": [
								        {
								            "enable_ssl": ssl,
								            "port_range_end": servicePort,
								            "port": servicePort
								        }
								    ],
						"pool_ref": pool_ref,
						"name": Name, 
						"enabled": true,
				}
			var vsData = JSON.stringify(configuration);
			System.log("Virtual service data :-> "+vsData);
			aviVroClient.add("virtualservice", vsData)
			
			resp = aviVroClient.executeWorkflow();
			System.log("Virtual service Created:-> "+ JSON.stringify(resp));

} catch (e) {
	throw "Error while virtual service object : " + e
}
]]></script>
</dunes-script-module>