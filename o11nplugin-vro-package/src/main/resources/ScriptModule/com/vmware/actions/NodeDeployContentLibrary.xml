<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="NodeDeployContentLibrary"
	result-type="string" api-version="6.0.0"
	id="afda7d1b-68b3-475a-96f0-38d5e8883c26" version="0.0.0"
	allowed-operations="vfe">
	<description><![CDATA[This Action is used to deploy a single Avi Node using an ova image uploaded to a VMWare Content Library]]></description>
	<param n="sdkVcenter" t="string"><![CDATA[]]>
	</param>
	<param n="datastore" t="string"><![CDATA[]]>
	</param>
	<param n="network" t="string"><![CDATA[]]>
	</param>
	<param n="folder" t="string"><![CDATA[]]>
	</param>
	<param n="Controller1_name" t="string"><![CDATA[]]>
	</param>
	<param n="datacenter" t="string"><![CDATA[]]>
	</param>
	<param n="Controller_IP_mask" t="string"><![CDATA[]]>
	</param>
	<param n="Controller_IP_GW" t="string"><![CDATA[]]>
	</param>
	<param n="controller1" t="string"><![CDATA[]]>
	</param>
	<param n="cluster" t="string"><![CDATA[]]>
	</param>
	<param n="resourcePool" t="string"><![CDATA[]]>
	</param>
	<param n="contentLibraryTemplate" t="string"><![CDATA[]]>
	</param>
	<param n="vmCPU" t="string"><![CDATA[]]>
	</param>
	<param n="vmRAM" t="string"><![CDATA[]]>
	</param>
	<param n="vmDisk" t="string"><![CDATA[]]>
	</param>
	<script encoded="false"><![CDATA[
// Variable Definition
var TemplateName = contentLibraryTemplate
var targetSizeGB = vmDisk
var targetSizeKB = targetSizeGB * 1024 * 1024;
var vmNameNode1 = Controller1_name



// Set the VAPI endpoint 
var vCenter = sdkVcenter.split(":")[1]
var endpoints = VAPIManager.getAllEndpoints();  
for (var endpoint in endpoints){
    var apiName = endpoints[endpoint].name
    if (apiName.indexOf(vCenter) >= 0) {
        var client = endpoints[endpoint].client()
}
}

// Set the vCenter connection
var connections = VcPlugin.allSdkConnections;
for (var connection in connections) {
    var sdkName = connections[connection].name;
    if (sdkName.indexOf(sdkVcenter) >= 0) {
        var sdkConnection = connections[connection]

    }
}

/// Verify if VM 1 already exists
var virtualMachine = sdkConnection.getAllVirtualMachines()

for (vm in virtualMachine){
    if(virtualMachine[vm].name == vmNameNode1){
        throw "Vm with name "+vmNameNode1+" already exists. Please validate the VM."

    }


}





// Get vCenter elements
var datastoreObj = sdkConnection.getAllDatastores(null, datastore)[0]
var vmFolderObj = sdkConnection.getAllVmFolders(null, folder)[0]
var resourcePoolObj = sdkConnection.getAllResourcePools(null, resourcePool)[0]
var clusterObj = sdkConnection.getAllClusterComputeResources(null, cluster)[0]
var dvPortgroupObj = sdkConnection.getAllDistributedVirtualPortgroups(null, network)[0]


// Deploy Node 1
// -----------------------------------------------------------------------


try {

  /// Content Library VM deployment

  var itemSvc = new com_vmware_content_library_item(client)
  var findItemSpec = new com_vmware_content_library_item_find__spec()
  findItemSpec.name = TemplateName
  var results = itemSvc.find(findItemSpec)
  
  if (!Array.isArray(results) || !results.length) {
    throw new Error("Content Library template " + TemplateName + " was not found")
    }

  var ovfLibraryItemId = results.shift()

  // Get random host in cluster
  const random = Math.floor(Math.random() * clusterObj.host.length);

  
  // create a DeploymentTarget 
  var deploymentTarget = new com_vmware_vcenter_ovf_library__item_deployment__target();

  deploymentTarget.folder_id = vmFolderObj.id;
  deploymentTarget.host_id = clusterObj.host[random].id;
  deploymentTarget.resource_pool_id = resourcePoolObj.id;


  // create a ResourcePoolDeploymentSpec 
  var resourcePoolDeploymentSpec = new com_vmware_vcenter_ovf_library__item_resource__pool__deployment__spec();
  resourcePoolDeploymentSpec.accept_all_EULA = true;
  resourcePoolDeploymentSpec.name = vmNameNode1;
  resourcePoolDeploymentSpec.default_datastore_id = datastoreObj.id;

  // deploy the ovf 
  var ovfSvc = new com_vmware_vcenter_ovf_library__item(client);
  var result = ovfSvc.deploy(null, ovfLibraryItemId, deploymentTarget, resourcePoolDeploymentSpec);


  
  /// return the vmObject
  vmObject = VcPlugin.getAllVirtualMachines(null, "xpath:matches(id, '" + result.resource_id.id + "')")[0];



  /// Increase vm disk space

  var devices = vmObject.config.hardware.device;
  var disks = new Array();
  for (device in devices) {
    if (devices[device] instanceof VcVirtualDisk) {
      disks.push(devices[device]);
      }
  }

  var disk = disks[0];

    

  if (disk.capacityInKB >= targetSizeKB) {
      System.error(disk.deviceInfo.label + ": size is greater than or equal to the target size")
  }

  // Set new disk size
  disk.capacityInKB = targetSizeKB;
  //Add disk to devicespec and devicespec to configspec
  var deviceSpec = new VcVirtualDeviceConfigSpec();
  deviceSpec.operation = VcVirtualDeviceConfigSpecOperation.edit;
  deviceSpec.device = disk;
  var deviceConfigSpecs = new Array();
  deviceConfigSpecs.push(deviceSpec);
  var configSpec = new VcVirtualMachineConfigSpec();
  configSpec.deviceChange = deviceConfigSpecs;
  reconfigTask = vmObject.reconfigVM_Task(configSpec);
  System.getModule("com.vmware.library.vc.basic").vim3WaitTaskEnd(reconfigTask, false, 5);


  
  /// Define vAPP porperties for mgmt-ip, subnet mask and gateway
  
  //Retrieve vAPP properties and store in array
  var vapp_prop = vmObject.config.vAppConfig.property

  var properties = new Array()
  for (prop in vapp_prop){

    properties.push(vapp_prop[prop])

  }

  //--------------------------------



for (property in properties){
      /// Update subnet mask property
    if(properties[property].id == "mgmt-ip"){
        properties[property].value = controller1

        var deviceSpec = new VcVirtualMachineConfigSpec();
        deviceSpec.vAppConfig = new VcVmConfigSpec();

        var newProperty = new VcVAppPropertySpec();

        newProperty.operation = VcArrayUpdateOperation.edit;
        newProperty.info = properties[property];

        //Add property spec to array
        var propertyspecs = new Array();
        propertyspecs.push(newProperty);
        
        //Assign array
        deviceSpec.vAppConfig.property = propertyspecs; 
        
        //Reconfigure the VM
        vmObject.reconfigVM_Task(deviceSpec);

  
    }
    /// Update subnet mask property
    else if (properties[property].id == "mgmt-mask"){
        properties[property].value = Controller_IP_mask 

        var deviceSpec = new VcVirtualMachineConfigSpec();
        deviceSpec.vAppConfig = new VcVmConfigSpec();

        var newProperty = new VcVAppPropertySpec();

        newProperty.operation = VcArrayUpdateOperation.edit;
        newProperty.info = properties[property];

        //Add property spec to array
        var propertyspecs = new Array();
        propertyspecs.push(newProperty);
        
        //Assign array
        deviceSpec.vAppConfig.property = propertyspecs; 
        
        //Reconfigure the VM
        vmObject.reconfigVM_Task(deviceSpec);
       
    }
      /// Update gateway property
    else if (properties[property].id == "default-gw"){
        properties[property].value = Controller_IP_GW

        var deviceSpec = new VcVirtualMachineConfigSpec();
        deviceSpec.vAppConfig = new VcVmConfigSpec();

        var newProperty = new VcVAppPropertySpec();

        newProperty.operation = VcArrayUpdateOperation.edit;
        newProperty.info = properties[property];

        //Add property spec to array
        var propertyspecs = new Array();
        propertyspecs.push(newProperty);
        
        //Assign array
        deviceSpec.vAppConfig.property = propertyspecs; 
        
        //Reconfigure the VM
        vmObject.reconfigVM_Task(deviceSpec);      
       
    }


}

  //--------------------------------


  /// Change ram and CPU, as well as set distrobuted port group
  
  //Initialize a Virtual Machine Config Spec first
  var vmspec = new VcVirtualMachineConfigSpec(); 

  //Set ram and cpu spec
  vmspec.memoryMB = vmRAM;
  vmspec.numCPUs = vmCPU

  // Array holds each of the nic configurations (devicespecs)
  var nicArray = new Array(); 

  //NIC configuration spec and backing info
  var nic = new VcVirtualEthernetCardDistributedVirtualPortBackingInfo(); 

  //Port Connection details for dvSwitch backing
  var port = new VcDistributedVirtualSwitchPortConnection(); 

  //Need to get the uuid of the distributed virtual switch hosting the portgroup:
  var dvSwitch = VcPlugin.convertToVimManagedObject(dvPortgroupObj, dvPortgroupObj.config.distributedVirtualSwitch);
  port.switchUuid = dvSwitch.uuid;
  port.portgroupKey = dvPortgroupObj.key;
  nic.port = port;
  var nicNumber = 0;

  var devicespec = new VcVirtualDeviceConfigSpec();
  var devices = vmObject.config.hardware.device;
  var actualPos = 0;
  for( var i in devices){
    if (System.getModule("com.vmware.library.vc.vm.network").isSupportedNic(devices[i])) {


      if(actualPos++ == nicNumber){
          devicespec.device = devices[i];
          devicespec.operation = VcVirtualDeviceConfigSpecOperation.edit;
          devicespec.device.backing = nic;
          nicArray.push(devicespec);
      }
    }
  }

  //Reconfigure VM and change ram,cpu and distrobuted port group
  vmspec.deviceChange = nicArray;
  vmObject.reconfigVM_Task(vmspec);



  //Power on VM
  System.sleep(5000);
  vmObject.powerOnVM_Task(); 

 
}
finally {
System.log("Node 1 deployment completed")
client.close();
}
// -----------------------------------------------------------------------



]]></script>
</dunes-script-module>