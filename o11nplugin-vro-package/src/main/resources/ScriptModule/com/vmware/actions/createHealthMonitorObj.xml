<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="createHealthMonitorObj"
	result-type="Avi:WorkflowRuntime" api-version="6.0.0"
	id="912babe5-8cf5-4104-b5c2-b55ab69c9b5c" version="0.0.5"
	allowed-operations="vfe">
	<param n="healthMonitorType" t="string"><![CDATA[Health monitor type]]></param>
	<param n="hm_type" t="string"><![CDATA[Health monitor type]]></param>
	<param n="hm_name" t="string"><![CDATA[Health monitor name]]></param>
	<param n="hm_description" t="string"><![CDATA[Health monitor description]]></param>
	<param n="is_federated" t="boolean"><![CDATA[is federated]]></param>
	<param n="monitor_port" t="number"><![CDATA[Monitor port]]></param>
	<param n="time_out" t="number"><![CDATA[Time out]]></param>
	<param n="send_interval" t="number"><![CDATA[Send interval]]></param>
	<param n="successful_check" t="number"><![CDATA[Successful Check]]></param>
	<param n="failed_check" t="number"><![CDATA[Failed check]]></param>
	<param n="command_code" t="string"><![CDATA[Command code]]></param>
	<param n="udp_request" t="string"><![CDATA[UDP request]]></param>
	<param n="dns_query_name" t="string"><![CDATA[DNS query name]]></param>
	<param n="http_response_code" t="Array/string"><![CDATA[HTTP Response code]]></param>
	<param n="tcp_request" t="string"><![CDATA[TCP request]]></param>
	<param n="tcp_response" t="string"><![CDATA[TCP Response]]></param>
	<param n="tcp_half_open" t="boolean"><![CDATA[TCP half open]]></param>
	<param n="maintenance_code" t="string"><![CDATA[Maintenance code]]></param>
	<param n="workflowRuntime" t="Avi:WorkflowRuntime"><![CDATA[Avi vro client]]></param>
	<param n="Tenant" t="string"><![CDATA[Tenant name]]></param>
	<param n="https_response_code" t="Array/string"><![CDATA[https response code]]></param>
	<param n="health_monitor_uuid" t="Array/string"><![CDATA[Uuid of health monitor]]></param>
	<script encoded="false"><![CDATA[try{
	if(workflowRuntime.getAviVroClient() !=null){
		Tenant = workflowRuntime.getAviVroClient().cred.tenant;
		healthMonitorObj = new AviHealthMonitor();
		if (health_monitor_uuid){
			healthMonitorObj.setUuid(health_monitor_uuid);
		}
		healthMonitorObj.setTenantRef("/api/tenant?name="+Tenant);
		healthMonitorObj.setName(hm_name);
		healthMonitorObj.setDescription(hm_description)
		if (is_federated){
			healthMonitorObj.setIsFederated(is_federated);
		}
		if (monitor_port){
			healthMonitorObj.setMonitorPort(monitor_port);
		}
		if (time_out){
			healthMonitorObj.setReceiveTimeout(time_out);
		}
		if (send_interval){
			healthMonitorObj.setSendInterval(send_interval);
		}
		if (successful_check){
			healthMonitorObj.setSuccessfulChecks(successful_check);
		}
		if (failed_check){
			healthMonitorObj.setFailedChecks(failed_check);
		}
		//never used anywhere
		healthMonitorObj.setDisableQuickstart();

		// Check the Response Code 
		var Response ="";
		if (healthMonitorType == "HTTP"){
			Response = http_response_code
		}else if(healthMonitorType == "HTTPS"){
			Response = https_response_code
		}
			

		var type = healthMonitorType.toUpperCase();
		type = "HEALTH_MONITOR_"+type.replace(" ", "_");
		if (type == "HEALTH_MONITOR_EXTERNAL") {
				healthMonitorExternalObj = new AviHealthMonitorExternal() ;
				healthMonitorExternalObj.setCommandCode(command_code);
				healthMonitorObj.setExternalMonitor(healthMonitorExternalObj);
			}else if (type == "HEALTH_MONITOR_UDP") {
				healthMonitorUDPObj = new AviHealthMonitorUdp();
				healthMonitorUDPObj.setUdpRequest(udp_request);
				healthMonitorObj.setUdpMonitor(healthMonitorUDPObj);
			}else if (type == "HEALTH_MONITOR_DNS") {
				healthMonitorDNSObj = new AviHealthMonitorDNS();
				healthMonitorDNSObj.setQueryName(dns_query_name);
				healthMonitorObj.setDnsMonitor(healthMonitorDNSObj);
			}else if (type == "HEALTH_MONITOR_HTTP") {
				healthMonitorHTTPObj = new AviHealthMonitorHttp() ;
				for (i=0; i<Response.length; i++) {
					var code = "HTTP_" + Response[i]
					healthMonitorHTTPObj.addHttpResponseCodeItem(code);	
				}
				healthMonitorObj.setHttpMonitor(healthMonitorHTTPObj);
			}else if (type == "HEALTH_MONITOR_HTTPS") {
				sslMonitorObj = new AviHealthMonitorSSLAttributes() ;
				sslMonitorObj.setSslProfileRef("/api/sslprofile?name=System-Standard");
				sslMonitorObj.setSslKeyAndCertificateRef("/api/sslkeyandcertificate?name=System-Default-Cert");
				healthMonitorHTTPObj = new AviHealthMonitorHttp();
				for (i=0; i<Response.length; i++) {
					var code = "HTTP_" + Response[i]
					healthMonitorHTTPObj.addHttpResponseCodeItem(code);	
				}
				healthMonitorHTTPObj.setSslAttributes(sslMonitorObj);
				healthMonitorObj.setHttpsMonitor(healthMonitorHTTPObj);
			}else if (type == "HEALTH_MONITOR_TCP") {
				healthMonitorTCPObj = new AviHealthMonitorTcp() ;
				if (tcp_request || tcp_response || tcp_half_open || maintenance_code){
					if (tcp_half_open != false){
						healthMonitorTCPObj.setTcpRequest(tcp_request);
						healthMonitorTCPObj.setTcpResponse(tcp_response);
						healthMonitorTCPObj.setTcpHalfOpen(tcp_half_open);
					}else{
						healthMonitorTCPObj.setTcpRequest(tcp_request);
						healthMonitorTCPObj.setTcpResponse(tcp_response);
						healthMonitorTCPObj.setTcpHalfOpen(tcp_half_open);
						healthMonitorTCPObj.setMaintenanceResponse(maintenance_code);
					}
				}
				healthMonitorObj.setTcpMonitor(healthMonitorTCPObj);
			}
		}
		healthMonitorObj.setType(type);
		System.log("healthMonitorObj : "+healthMonitorObj);
		workflowRuntime.getAviVroClient().addObject(healthMonitorObj, workflowRuntime.getWorkflowId(), Tenant);
	return workflowRuntime;
	} catch (e) {
	throw "Error when create HealthMonitor -> "+ e
}
	]]></script>
</dunes-script-module>